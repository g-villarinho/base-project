// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/g-villarinho/base-project/internal/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewUserRepositoryMock creates a new instance of UserRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryMock {
	mock := &UserRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRepositoryMock is an autogenerated mock type for the UserRepository type
type UserRepositoryMock struct {
	mock.Mock
}

type UserRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepositoryMock) EXPECT() *UserRepositoryMock_Expecter {
	return &UserRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type UserRepositoryMock
func (_mock *UserRepositoryMock) Create(ctx context.Context, user *domain.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *UserRepositoryMock_Expecter) Create(ctx interface{}, user interface{}) *UserRepositoryMock_Create_Call {
	return &UserRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *UserRepositoryMock_Create_Call) Run(run func(ctx context.Context, user *domain.User)) *UserRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.User
		if args[1] != nil {
			arg1 = args[1].(*domain.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepositoryMock_Create_Call) Return(err error) *UserRepositoryMock_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepositoryMock_Create_Call) RunAndReturn(run func(ctx context.Context, user *domain.User) error) *UserRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByEmail provides a mock function for the type UserRepositoryMock
func (_mock *UserRepositoryMock) ExistsByEmail(ctx context.Context, email string) (bool, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByEmail")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepositoryMock_ExistsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByEmail'
type UserRepositoryMock_ExistsByEmail_Call struct {
	*mock.Call
}

// ExistsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepositoryMock_Expecter) ExistsByEmail(ctx interface{}, email interface{}) *UserRepositoryMock_ExistsByEmail_Call {
	return &UserRepositoryMock_ExistsByEmail_Call{Call: _e.mock.On("ExistsByEmail", ctx, email)}
}

func (_c *UserRepositoryMock_ExistsByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepositoryMock_ExistsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepositoryMock_ExistsByEmail_Call) Return(b bool, err error) *UserRepositoryMock_ExistsByEmail_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *UserRepositoryMock_ExistsByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (bool, error)) *UserRepositoryMock_ExistsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function for the type UserRepositoryMock
func (_mock *UserRepositoryMock) FindByEmail(ctx context.Context, email string) (*domain.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepositoryMock_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type UserRepositoryMock_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepositoryMock_Expecter) FindByEmail(ctx interface{}, email interface{}) *UserRepositoryMock_FindByEmail_Call {
	return &UserRepositoryMock_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *UserRepositoryMock_FindByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepositoryMock_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepositoryMock_FindByEmail_Call) Return(user *domain.User, err error) *UserRepositoryMock_FindByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *UserRepositoryMock_FindByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*domain.User, error)) *UserRepositoryMock_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type UserRepositoryMock
func (_mock *UserRepositoryMock) FindByID(ctx context.Context, ID uuid.UUID) (*domain.User, error) {
	ret := _mock.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.User, error)); ok {
		return returnFunc(ctx, ID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.User); ok {
		r0 = returnFunc(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepositoryMock_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type UserRepositoryMock_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *UserRepositoryMock_Expecter) FindByID(ctx interface{}, ID interface{}) *UserRepositoryMock_FindByID_Call {
	return &UserRepositoryMock_FindByID_Call{Call: _e.mock.On("FindByID", ctx, ID)}
}

func (_c *UserRepositoryMock_FindByID_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *UserRepositoryMock_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepositoryMock_FindByID_Call) Return(user *domain.User, err error) *UserRepositoryMock_FindByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *UserRepositoryMock_FindByID_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID) (*domain.User, error)) *UserRepositoryMock_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmail provides a mock function for the type UserRepositoryMock
func (_mock *UserRepositoryMock) UpdateEmail(ctx context.Context, ID uuid.UUID, newEmail string) error {
	ret := _mock.Called(ctx, ID, newEmail)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, ID, newEmail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepositoryMock_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type UserRepositoryMock_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - newEmail string
func (_e *UserRepositoryMock_Expecter) UpdateEmail(ctx interface{}, ID interface{}, newEmail interface{}) *UserRepositoryMock_UpdateEmail_Call {
	return &UserRepositoryMock_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, ID, newEmail)}
}

func (_c *UserRepositoryMock_UpdateEmail_Call) Run(run func(ctx context.Context, ID uuid.UUID, newEmail string)) *UserRepositoryMock_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRepositoryMock_UpdateEmail_Call) Return(err error) *UserRepositoryMock_UpdateEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepositoryMock_UpdateEmail_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, newEmail string) error) *UserRepositoryMock_UpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateName provides a mock function for the type UserRepositoryMock
func (_mock *UserRepositoryMock) UpdateName(ctx context.Context, ID uuid.UUID, name string) error {
	ret := _mock.Called(ctx, ID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateName")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, ID, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepositoryMock_UpdateName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateName'
type UserRepositoryMock_UpdateName_Call struct {
	*mock.Call
}

// UpdateName is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - name string
func (_e *UserRepositoryMock_Expecter) UpdateName(ctx interface{}, ID interface{}, name interface{}) *UserRepositoryMock_UpdateName_Call {
	return &UserRepositoryMock_UpdateName_Call{Call: _e.mock.On("UpdateName", ctx, ID, name)}
}

func (_c *UserRepositoryMock_UpdateName_Call) Run(run func(ctx context.Context, ID uuid.UUID, name string)) *UserRepositoryMock_UpdateName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRepositoryMock_UpdateName_Call) Return(err error) *UserRepositoryMock_UpdateName_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepositoryMock_UpdateName_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, name string) error) *UserRepositoryMock_UpdateName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function for the type UserRepositoryMock
func (_mock *UserRepositoryMock) UpdatePassword(ctx context.Context, ID uuid.UUID, newPasswordHash string) error {
	ret := _mock.Called(ctx, ID, newPasswordHash)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, ID, newPasswordHash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepositoryMock_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type UserRepositoryMock_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - newPasswordHash string
func (_e *UserRepositoryMock_Expecter) UpdatePassword(ctx interface{}, ID interface{}, newPasswordHash interface{}) *UserRepositoryMock_UpdatePassword_Call {
	return &UserRepositoryMock_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, ID, newPasswordHash)}
}

func (_c *UserRepositoryMock_UpdatePassword_Call) Run(run func(ctx context.Context, ID uuid.UUID, newPasswordHash string)) *UserRepositoryMock_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRepositoryMock_UpdatePassword_Call) Return(err error) *UserRepositoryMock_UpdatePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepositoryMock_UpdatePassword_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, newPasswordHash string) error) *UserRepositoryMock_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function for the type UserRepositoryMock
func (_mock *UserRepositoryMock) VerifyEmail(ctx context.Context, ID uuid.UUID) error {
	ret := _mock.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepositoryMock_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type UserRepositoryMock_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *UserRepositoryMock_Expecter) VerifyEmail(ctx interface{}, ID interface{}) *UserRepositoryMock_VerifyEmail_Call {
	return &UserRepositoryMock_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", ctx, ID)}
}

func (_c *UserRepositoryMock_VerifyEmail_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *UserRepositoryMock_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepositoryMock_VerifyEmail_Call) Return(err error) *UserRepositoryMock_VerifyEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepositoryMock_VerifyEmail_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID) error) *UserRepositoryMock_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}
