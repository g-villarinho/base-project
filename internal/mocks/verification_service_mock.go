// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/g-villarinho/base-project/internal/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewVerificationServiceMock creates a new instance of VerificationServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerificationServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *VerificationServiceMock {
	mock := &VerificationServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VerificationServiceMock is an autogenerated mock type for the VerificationService type
type VerificationServiceMock struct {
	mock.Mock
}

type VerificationServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *VerificationServiceMock) EXPECT() *VerificationServiceMock_Expecter {
	return &VerificationServiceMock_Expecter{mock: &_m.Mock}
}

// CreateVerification provides a mock function for the type VerificationServiceMock
func (_mock *VerificationServiceMock) CreateVerification(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow, payload string) (*domain.Verification, error) {
	ret := _mock.Called(ctx, userID, flow, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateVerification")
	}

	var r0 *domain.Verification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.VerificationFlow, string) (*domain.Verification, error)); ok {
		return returnFunc(ctx, userID, flow, payload)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.VerificationFlow, string) *domain.Verification); ok {
		r0 = returnFunc(ctx, userID, flow, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Verification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, domain.VerificationFlow, string) error); ok {
		r1 = returnFunc(ctx, userID, flow, payload)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VerificationServiceMock_CreateVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVerification'
type VerificationServiceMock_CreateVerification_Call struct {
	*mock.Call
}

// CreateVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - flow domain.VerificationFlow
//   - payload string
func (_e *VerificationServiceMock_Expecter) CreateVerification(ctx interface{}, userID interface{}, flow interface{}, payload interface{}) *VerificationServiceMock_CreateVerification_Call {
	return &VerificationServiceMock_CreateVerification_Call{Call: _e.mock.On("CreateVerification", ctx, userID, flow, payload)}
}

func (_c *VerificationServiceMock_CreateVerification_Call) Run(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow, payload string)) *VerificationServiceMock_CreateVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 domain.VerificationFlow
		if args[2] != nil {
			arg2 = args[2].(domain.VerificationFlow)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *VerificationServiceMock_CreateVerification_Call) Return(verification *domain.Verification, err error) *VerificationServiceMock_CreateVerification_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *VerificationServiceMock_CreateVerification_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow, payload string) (*domain.Verification, error)) *VerificationServiceMock_CreateVerification_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateVerificationURL provides a mock function for the type VerificationServiceMock
func (_mock *VerificationServiceMock) GenerateVerificationURL(token string, flow domain.VerificationFlow) string {
	ret := _mock.Called(token, flow)

	if len(ret) == 0 {
		panic("no return value specified for GenerateVerificationURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, domain.VerificationFlow) string); ok {
		r0 = returnFunc(token, flow)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// VerificationServiceMock_GenerateVerificationURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateVerificationURL'
type VerificationServiceMock_GenerateVerificationURL_Call struct {
	*mock.Call
}

// GenerateVerificationURL is a helper method to define mock.On call
//   - token string
//   - flow domain.VerificationFlow
func (_e *VerificationServiceMock_Expecter) GenerateVerificationURL(token interface{}, flow interface{}) *VerificationServiceMock_GenerateVerificationURL_Call {
	return &VerificationServiceMock_GenerateVerificationURL_Call{Call: _e.mock.On("GenerateVerificationURL", token, flow)}
}

func (_c *VerificationServiceMock_GenerateVerificationURL_Call) Run(run func(token string, flow domain.VerificationFlow)) *VerificationServiceMock_GenerateVerificationURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 domain.VerificationFlow
		if args[1] != nil {
			arg1 = args[1].(domain.VerificationFlow)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VerificationServiceMock_GenerateVerificationURL_Call) Return(s string) *VerificationServiceMock_GenerateVerificationURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *VerificationServiceMock_GenerateVerificationURL_Call) RunAndReturn(run func(token string, flow domain.VerificationFlow) string) *VerificationServiceMock_GenerateVerificationURL_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateUserVerifications provides a mock function for the type VerificationServiceMock
func (_mock *VerificationServiceMock) InvalidateUserVerifications(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow) error {
	ret := _mock.Called(ctx, userID, flow)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateUserVerifications")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.VerificationFlow) error); ok {
		r0 = returnFunc(ctx, userID, flow)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VerificationServiceMock_InvalidateUserVerifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateUserVerifications'
type VerificationServiceMock_InvalidateUserVerifications_Call struct {
	*mock.Call
}

// InvalidateUserVerifications is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - flow domain.VerificationFlow
func (_e *VerificationServiceMock_Expecter) InvalidateUserVerifications(ctx interface{}, userID interface{}, flow interface{}) *VerificationServiceMock_InvalidateUserVerifications_Call {
	return &VerificationServiceMock_InvalidateUserVerifications_Call{Call: _e.mock.On("InvalidateUserVerifications", ctx, userID, flow)}
}

func (_c *VerificationServiceMock_InvalidateUserVerifications_Call) Run(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow)) *VerificationServiceMock_InvalidateUserVerifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 domain.VerificationFlow
		if args[2] != nil {
			arg2 = args[2].(domain.VerificationFlow)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VerificationServiceMock_InvalidateUserVerifications_Call) Return(err error) *VerificationServiceMock_InvalidateUserVerifications_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VerificationServiceMock_InvalidateUserVerifications_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow) error) *VerificationServiceMock_InvalidateUserVerifications_Call {
	_c.Call.Return(run)
	return _c
}

// SendVerificationEmail provides a mock function for the type VerificationServiceMock
func (_mock *VerificationServiceMock) SendVerificationEmail(ctx context.Context, user *domain.User, flow domain.VerificationFlow) error {
	ret := _mock.Called(ctx, user, flow)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User, domain.VerificationFlow) error); ok {
		r0 = returnFunc(ctx, user, flow)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VerificationServiceMock_SendVerificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerificationEmail'
type VerificationServiceMock_SendVerificationEmail_Call struct {
	*mock.Call
}

// SendVerificationEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
//   - flow domain.VerificationFlow
func (_e *VerificationServiceMock_Expecter) SendVerificationEmail(ctx interface{}, user interface{}, flow interface{}) *VerificationServiceMock_SendVerificationEmail_Call {
	return &VerificationServiceMock_SendVerificationEmail_Call{Call: _e.mock.On("SendVerificationEmail", ctx, user, flow)}
}

func (_c *VerificationServiceMock_SendVerificationEmail_Call) Run(run func(ctx context.Context, user *domain.User, flow domain.VerificationFlow)) *VerificationServiceMock_SendVerificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.User
		if args[1] != nil {
			arg1 = args[1].(*domain.User)
		}
		var arg2 domain.VerificationFlow
		if args[2] != nil {
			arg2 = args[2].(domain.VerificationFlow)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VerificationServiceMock_SendVerificationEmail_Call) Return(err error) *VerificationServiceMock_SendVerificationEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VerificationServiceMock_SendVerificationEmail_Call) RunAndReturn(run func(ctx context.Context, user *domain.User, flow domain.VerificationFlow) error) *VerificationServiceMock_SendVerificationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAndConsume provides a mock function for the type VerificationServiceMock
func (_mock *VerificationServiceMock) ValidateAndConsume(ctx context.Context, token string, expectedFlow domain.VerificationFlow) (*domain.Verification, error) {
	ret := _mock.Called(ctx, token, expectedFlow)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAndConsume")
	}

	var r0 *domain.Verification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.VerificationFlow) (*domain.Verification, error)); ok {
		return returnFunc(ctx, token, expectedFlow)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.VerificationFlow) *domain.Verification); ok {
		r0 = returnFunc(ctx, token, expectedFlow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Verification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, domain.VerificationFlow) error); ok {
		r1 = returnFunc(ctx, token, expectedFlow)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VerificationServiceMock_ValidateAndConsume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAndConsume'
type VerificationServiceMock_ValidateAndConsume_Call struct {
	*mock.Call
}

// ValidateAndConsume is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - expectedFlow domain.VerificationFlow
func (_e *VerificationServiceMock_Expecter) ValidateAndConsume(ctx interface{}, token interface{}, expectedFlow interface{}) *VerificationServiceMock_ValidateAndConsume_Call {
	return &VerificationServiceMock_ValidateAndConsume_Call{Call: _e.mock.On("ValidateAndConsume", ctx, token, expectedFlow)}
}

func (_c *VerificationServiceMock_ValidateAndConsume_Call) Run(run func(ctx context.Context, token string, expectedFlow domain.VerificationFlow)) *VerificationServiceMock_ValidateAndConsume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.VerificationFlow
		if args[2] != nil {
			arg2 = args[2].(domain.VerificationFlow)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VerificationServiceMock_ValidateAndConsume_Call) Return(verification *domain.Verification, err error) *VerificationServiceMock_ValidateAndConsume_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *VerificationServiceMock_ValidateAndConsume_Call) RunAndReturn(run func(ctx context.Context, token string, expectedFlow domain.VerificationFlow) (*domain.Verification, error)) *VerificationServiceMock_ValidateAndConsume_Call {
	_c.Call.Return(run)
	return _c
}
