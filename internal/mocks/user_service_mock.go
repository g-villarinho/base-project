// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/g-villarinho/user-demo/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserServiceMock is an autogenerated mock type for the UserService type
type UserServiceMock struct {
	mock.Mock
}

type UserServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserServiceMock) EXPECT() *UserServiceMock_Expecter {
	return &UserServiceMock_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *UserServiceMock) GetUser(ctx context.Context, userID uuid.UUID) (*domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceMock_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserServiceMock_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *UserServiceMock_Expecter) GetUser(ctx interface{}, userID interface{}) *UserServiceMock_GetUser_Call {
	return &UserServiceMock_GetUser_Call{Call: _e.mock.On("GetUser", ctx, userID)}
}

func (_c *UserServiceMock_GetUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *UserServiceMock_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserServiceMock_GetUser_Call) Return(_a0 *domain.User, _a1 error) *UserServiceMock_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceMock_GetUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.User, error)) *UserServiceMock_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, userID, name
func (_m *UserServiceMock) UpdateUser(ctx context.Context, userID uuid.UUID, name string) error {
	ret := _m.Called(ctx, userID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, userID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserServiceMock_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserServiceMock_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - name string
func (_e *UserServiceMock_Expecter) UpdateUser(ctx interface{}, userID interface{}, name interface{}) *UserServiceMock_UpdateUser_Call {
	return &UserServiceMock_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, userID, name)}
}

func (_c *UserServiceMock_UpdateUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, name string)) *UserServiceMock_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *UserServiceMock_UpdateUser_Call) Return(_a0 error) *UserServiceMock_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserServiceMock_UpdateUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *UserServiceMock_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserServiceMock creates a new instance of UserServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceMock {
	mock := &UserServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
