// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/g-villarinho/user-demo/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AuthServiceMock is an autogenerated mock type for the AuthService type
type AuthServiceMock struct {
	mock.Mock
}

type AuthServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthServiceMock) EXPECT() *AuthServiceMock_Expecter {
	return &AuthServiceMock_Expecter{mock: &_m.Mock}
}

// ChangeEmail provides a mock function with given fields: ctx, token
func (_m *AuthServiceMock) ChangeEmail(ctx context.Context, token uuid.UUID) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ChangeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_ChangeEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeEmail'
type AuthServiceMock_ChangeEmail_Call struct {
	*mock.Call
}

// ChangeEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - token uuid.UUID
func (_e *AuthServiceMock_Expecter) ChangeEmail(ctx interface{}, token interface{}) *AuthServiceMock_ChangeEmail_Call {
	return &AuthServiceMock_ChangeEmail_Call{Call: _e.mock.On("ChangeEmail", ctx, token)}
}

func (_c *AuthServiceMock_ChangeEmail_Call) Run(run func(ctx context.Context, token uuid.UUID)) *AuthServiceMock_ChangeEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AuthServiceMock_ChangeEmail_Call) Return(_a0 error) *AuthServiceMock_ChangeEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_ChangeEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *AuthServiceMock_ChangeEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *AuthServiceMock) Login(ctx context.Context, email string, password string) (*model.AccessToken, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *model.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.AccessToken, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.AccessToken); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthServiceMock_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *AuthServiceMock_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *AuthServiceMock_Login_Call {
	return &AuthServiceMock_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *AuthServiceMock_Login_Call) Run(run func(ctx context.Context, email string, password string)) *AuthServiceMock_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthServiceMock_Login_Call) Return(_a0 *model.AccessToken, _a1 error) *AuthServiceMock_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_Login_Call) RunAndReturn(run func(context.Context, string, string) (*model.AccessToken, error)) *AuthServiceMock_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAccount provides a mock function with given fields: ctx, name, email, password
func (_m *AuthServiceMock) RegisterAccount(ctx context.Context, name string, email string, password string) error {
	ret := _m.Called(ctx, name, email, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, name, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_RegisterAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAccount'
type AuthServiceMock_RegisterAccount_Call struct {
	*mock.Call
}

// RegisterAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
//   - password string
func (_e *AuthServiceMock_Expecter) RegisterAccount(ctx interface{}, name interface{}, email interface{}, password interface{}) *AuthServiceMock_RegisterAccount_Call {
	return &AuthServiceMock_RegisterAccount_Call{Call: _e.mock.On("RegisterAccount", ctx, name, email, password)}
}

func (_c *AuthServiceMock_RegisterAccount_Call) Run(run func(ctx context.Context, name string, email string, password string)) *AuthServiceMock_RegisterAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AuthServiceMock_RegisterAccount_Call) Return(_a0 error) *AuthServiceMock_RegisterAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_RegisterAccount_Call) RunAndReturn(run func(context.Context, string, string, string) error) *AuthServiceMock_RegisterAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RequestChangeEmail provides a mock function with given fields: ctx, userID, newEmail
func (_m *AuthServiceMock) RequestChangeEmail(ctx context.Context, userID uuid.UUID, newEmail string) error {
	ret := _m.Called(ctx, userID, newEmail)

	if len(ret) == 0 {
		panic("no return value specified for RequestChangeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, userID, newEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_RequestChangeEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestChangeEmail'
type AuthServiceMock_RequestChangeEmail_Call struct {
	*mock.Call
}

// RequestChangeEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - newEmail string
func (_e *AuthServiceMock_Expecter) RequestChangeEmail(ctx interface{}, userID interface{}, newEmail interface{}) *AuthServiceMock_RequestChangeEmail_Call {
	return &AuthServiceMock_RequestChangeEmail_Call{Call: _e.mock.On("RequestChangeEmail", ctx, userID, newEmail)}
}

func (_c *AuthServiceMock_RequestChangeEmail_Call) Run(run func(ctx context.Context, userID uuid.UUID, newEmail string)) *AuthServiceMock_RequestChangeEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *AuthServiceMock_RequestChangeEmail_Call) Return(_a0 error) *AuthServiceMock_RequestChangeEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_RequestChangeEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *AuthServiceMock_RequestChangeEmail_Call {
	_c.Call.Return(run)
	return _c
}

// RequestPasswordReset provides a mock function with given fields: ctx, email
func (_m *AuthServiceMock) RequestPasswordReset(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for RequestPasswordReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_RequestPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPasswordReset'
type AuthServiceMock_RequestPasswordReset_Call struct {
	*mock.Call
}

// RequestPasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *AuthServiceMock_Expecter) RequestPasswordReset(ctx interface{}, email interface{}) *AuthServiceMock_RequestPasswordReset_Call {
	return &AuthServiceMock_RequestPasswordReset_Call{Call: _e.mock.On("RequestPasswordReset", ctx, email)}
}

func (_c *AuthServiceMock_RequestPasswordReset_Call) Run(run func(ctx context.Context, email string)) *AuthServiceMock_RequestPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthServiceMock_RequestPasswordReset_Call) Return(_a0 error) *AuthServiceMock_RequestPasswordReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_RequestPasswordReset_Call) RunAndReturn(run func(context.Context, string) error) *AuthServiceMock_RequestPasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, token, newPassword
func (_m *AuthServiceMock) ResetPassword(ctx context.Context, token uuid.UUID, newPassword string) (*model.AccessToken, error) {
	ret := _m.Called(ctx, token, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *model.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*model.AccessToken, error)); ok {
		return rf(ctx, token, newPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *model.AccessToken); ok {
		r0 = rf(ctx, token, newPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, token, newPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type AuthServiceMock_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - token uuid.UUID
//   - newPassword string
func (_e *AuthServiceMock_Expecter) ResetPassword(ctx interface{}, token interface{}, newPassword interface{}) *AuthServiceMock_ResetPassword_Call {
	return &AuthServiceMock_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, token, newPassword)}
}

func (_c *AuthServiceMock_ResetPassword_Call) Run(run func(ctx context.Context, token uuid.UUID, newPassword string)) *AuthServiceMock_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *AuthServiceMock_ResetPassword_Call) Return(_a0 *model.AccessToken, _a1 error) *AuthServiceMock_ResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_ResetPassword_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*model.AccessToken, error)) *AuthServiceMock_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, userID, currentPassword, newPassword
func (_m *AuthServiceMock) UpdatePassword(ctx context.Context, userID uuid.UUID, currentPassword string, newPassword string) error {
	ret := _m.Called(ctx, userID, currentPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) error); ok {
		r0 = rf(ctx, userID, currentPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type AuthServiceMock_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - currentPassword string
//   - newPassword string
func (_e *AuthServiceMock_Expecter) UpdatePassword(ctx interface{}, userID interface{}, currentPassword interface{}, newPassword interface{}) *AuthServiceMock_UpdatePassword_Call {
	return &AuthServiceMock_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, userID, currentPassword, newPassword)}
}

func (_c *AuthServiceMock_UpdatePassword_Call) Run(run func(ctx context.Context, userID uuid.UUID, currentPassword string, newPassword string)) *AuthServiceMock_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AuthServiceMock_UpdatePassword_Call) Return(_a0 error) *AuthServiceMock_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_UpdatePassword_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string) error) *AuthServiceMock_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function with given fields: ctx, token
func (_m *AuthServiceMock) VerifyEmail(ctx context.Context, token uuid.UUID) (*model.AccessToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 *model.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.AccessToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.AccessToken); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type AuthServiceMock_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - token uuid.UUID
func (_e *AuthServiceMock_Expecter) VerifyEmail(ctx interface{}, token interface{}) *AuthServiceMock_VerifyEmail_Call {
	return &AuthServiceMock_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", ctx, token)}
}

func (_c *AuthServiceMock_VerifyEmail_Call) Run(run func(ctx context.Context, token uuid.UUID)) *AuthServiceMock_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AuthServiceMock_VerifyEmail_Call) Return(_a0 *model.AccessToken, _a1 error) *AuthServiceMock_VerifyEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_VerifyEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.AccessToken, error)) *AuthServiceMock_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthServiceMock creates a new instance of AuthServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceMock {
	mock := &AuthServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
