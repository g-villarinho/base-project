// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	model "github.com/g-villarinho/user-demo/internal/model"

	uuid "github.com/google/uuid"
)

// JwtServiceMock is an autogenerated mock type for the JwtService type
type JwtServiceMock struct {
	mock.Mock
}

type JwtServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *JwtServiceMock) EXPECT() *JwtServiceMock_Expecter {
	return &JwtServiceMock_Expecter{mock: &_m.Mock}
}

// GenerateAccessTokenJWT provides a mock function with given fields: ctx, userID
func (_m *JwtServiceMock) GenerateAccessTokenJWT(ctx context.Context, userID uuid.UUID) (*model.AccessToken, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessTokenJWT")
	}

	var r0 *model.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.AccessToken, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.AccessToken); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtServiceMock_GenerateAccessTokenJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessTokenJWT'
type JwtServiceMock_GenerateAccessTokenJWT_Call struct {
	*mock.Call
}

// GenerateAccessTokenJWT is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *JwtServiceMock_Expecter) GenerateAccessTokenJWT(ctx interface{}, userID interface{}) *JwtServiceMock_GenerateAccessTokenJWT_Call {
	return &JwtServiceMock_GenerateAccessTokenJWT_Call{Call: _e.mock.On("GenerateAccessTokenJWT", ctx, userID)}
}

func (_c *JwtServiceMock_GenerateAccessTokenJWT_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *JwtServiceMock_GenerateAccessTokenJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *JwtServiceMock_GenerateAccessTokenJWT_Call) Return(_a0 *model.AccessToken, _a1 error) *JwtServiceMock_GenerateAccessTokenJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JwtServiceMock_GenerateAccessTokenJWT_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.AccessToken, error)) *JwtServiceMock_GenerateAccessTokenJWT_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAccessToken provides a mock function with given fields: ctx, token
func (_m *JwtServiceMock) VerifyAccessToken(ctx context.Context, token string) (*jwt.RegisteredClaims, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAccessToken")
	}

	var r0 *jwt.RegisteredClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*jwt.RegisteredClaims, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *jwt.RegisteredClaims); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.RegisteredClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtServiceMock_VerifyAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAccessToken'
type JwtServiceMock_VerifyAccessToken_Call struct {
	*mock.Call
}

// VerifyAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *JwtServiceMock_Expecter) VerifyAccessToken(ctx interface{}, token interface{}) *JwtServiceMock_VerifyAccessToken_Call {
	return &JwtServiceMock_VerifyAccessToken_Call{Call: _e.mock.On("VerifyAccessToken", ctx, token)}
}

func (_c *JwtServiceMock_VerifyAccessToken_Call) Run(run func(ctx context.Context, token string)) *JwtServiceMock_VerifyAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JwtServiceMock_VerifyAccessToken_Call) Return(_a0 *jwt.RegisteredClaims, _a1 error) *JwtServiceMock_VerifyAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JwtServiceMock_VerifyAccessToken_Call) RunAndReturn(run func(context.Context, string) (*jwt.RegisteredClaims, error)) *JwtServiceMock_VerifyAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewJwtServiceMock creates a new instance of JwtServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtServiceMock {
	mock := &JwtServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
