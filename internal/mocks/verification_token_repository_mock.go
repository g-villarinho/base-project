// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/g-villarinho/user-demo/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// VerificationTokenRepositoryMock is an autogenerated mock type for the VerificationTokenRepository type
type VerificationTokenRepositoryMock struct {
	mock.Mock
}

type VerificationTokenRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *VerificationTokenRepositoryMock) EXPECT() *VerificationTokenRepositoryMock_Expecter {
	return &VerificationTokenRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, verificationToken
func (_m *VerificationTokenRepositoryMock) Create(ctx context.Context, verificationToken *domain.Verification) error {
	ret := _m.Called(ctx, verificationToken)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Verification) error); ok {
		r0 = rf(ctx, verificationToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerificationTokenRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type VerificationTokenRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - verificationToken *domain.VerificationToken
func (_e *VerificationTokenRepositoryMock_Expecter) Create(ctx interface{}, verificationToken interface{}) *VerificationTokenRepositoryMock_Create_Call {
	return &VerificationTokenRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, verificationToken)}
}

func (_c *VerificationTokenRepositoryMock_Create_Call) Run(run func(ctx context.Context, verificationToken *domain.Verification)) *VerificationTokenRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Verification))
	})
	return _c
}

func (_c *VerificationTokenRepositoryMock_Create_Call) Return(_a0 error) *VerificationTokenRepositoryMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VerificationTokenRepositoryMock_Create_Call) RunAndReturn(run func(context.Context, *domain.Verification) error) *VerificationTokenRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *VerificationTokenRepositoryMock) Delete(ctx context.Context, ID uuid.UUID) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerificationTokenRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type VerificationTokenRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *VerificationTokenRepositoryMock_Expecter) Delete(ctx interface{}, ID interface{}) *VerificationTokenRepositoryMock_Delete_Call {
	return &VerificationTokenRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, ID)}
}

func (_c *VerificationTokenRepositoryMock_Delete_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *VerificationTokenRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *VerificationTokenRepositoryMock_Delete_Call) Return(_a0 error) *VerificationTokenRepositoryMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VerificationTokenRepositoryMock_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *VerificationTokenRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *VerificationTokenRepositoryMock) FindByID(ctx context.Context, ID uuid.UUID) (*domain.Verification, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Verification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Verification, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Verification); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Verification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerificationTokenRepositoryMock_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type VerificationTokenRepositoryMock_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *VerificationTokenRepositoryMock_Expecter) FindByID(ctx interface{}, ID interface{}) *VerificationTokenRepositoryMock_FindByID_Call {
	return &VerificationTokenRepositoryMock_FindByID_Call{Call: _e.mock.On("FindByID", ctx, ID)}
}

func (_c *VerificationTokenRepositoryMock_FindByID_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *VerificationTokenRepositoryMock_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *VerificationTokenRepositoryMock_FindByID_Call) Return(_a0 *domain.Verification, _a1 error) *VerificationTokenRepositoryMock_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VerificationTokenRepositoryMock_FindByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.Verification, error)) *VerificationTokenRepositoryMock_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindValidByUserIDAndFlow provides a mock function with given fields: ctx, userID, flow
func (_m *VerificationTokenRepositoryMock) FindValidByUserIDAndFlow(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow) (*domain.Verification, error) {
	ret := _m.Called(ctx, userID, flow)

	if len(ret) == 0 {
		panic("no return value specified for FindValidByUserIDAndFlow")
	}

	var r0 *domain.Verification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.VerificationFlow) (*domain.Verification, error)); ok {
		return rf(ctx, userID, flow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.VerificationFlow) *domain.Verification); ok {
		r0 = rf(ctx, userID, flow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Verification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, domain.VerificationFlow) error); ok {
		r1 = rf(ctx, userID, flow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindValidByUserIDAndFlow'
type VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call struct {
	*mock.Call
}

// FindValidByUserIDAndFlow is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - flow domain.VerificationTokenFlow
func (_e *VerificationTokenRepositoryMock_Expecter) FindValidByUserIDAndFlow(ctx interface{}, userID interface{}, flow interface{}) *VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call {
	return &VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call{Call: _e.mock.On("FindValidByUserIDAndFlow", ctx, userID, flow)}
}

func (_c *VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call) Run(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow)) *VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(domain.VerificationFlow))
	})
	return _c
}

func (_c *VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call) Return(_a0 *domain.Verification, _a1 error) *VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call) RunAndReturn(run func(context.Context, uuid.UUID, domain.VerificationFlow) (*domain.Verification, error)) *VerificationTokenRepositoryMock_FindValidByUserIDAndFlow_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateByUserIDAndFlow provides a mock function with given fields: ctx, userID, flow
func (_m *VerificationTokenRepositoryMock) InvalidateByUserIDAndFlow(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow) error {
	ret := _m.Called(ctx, userID, flow)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateByUserIDAndFlow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.VerificationFlow) error); ok {
		r0 = rf(ctx, userID, flow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateByUserIDAndFlow'
type VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call struct {
	*mock.Call
}

// InvalidateByUserIDAndFlow is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - flow domain.VerificationTokenFlow
func (_e *VerificationTokenRepositoryMock_Expecter) InvalidateByUserIDAndFlow(ctx interface{}, userID interface{}, flow interface{}) *VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call {
	return &VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call{Call: _e.mock.On("InvalidateByUserIDAndFlow", ctx, userID, flow)}
}

func (_c *VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call) Run(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow)) *VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(domain.VerificationFlow))
	})
	return _c
}

func (_c *VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call) Return(_a0 error) *VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call) RunAndReturn(run func(context.Context, uuid.UUID, domain.VerificationFlow) error) *VerificationTokenRepositoryMock_InvalidateByUserIDAndFlow_Call {
	_c.Call.Return(run)
	return _c
}

// NewVerificationTokenRepositoryMock creates a new instance of VerificationTokenRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerificationTokenRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *VerificationTokenRepositoryMock {
	mock := &VerificationTokenRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
