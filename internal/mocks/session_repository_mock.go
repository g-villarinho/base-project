// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/g-villarinho/user-demo/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SessionRepositoryMock is an autogenerated mock type for the SessionRepository type
type SessionRepositoryMock struct {
	mock.Mock
}

type SessionRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRepositoryMock) EXPECT() *SessionRepositoryMock_Expecter {
	return &SessionRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, session
func (_m *SessionRepositoryMock) Create(ctx context.Context, session *domain.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - session *domain.Session
func (_e *SessionRepositoryMock_Expecter) Create(ctx interface{}, session interface{}) *SessionRepositoryMock_Create_Call {
	return &SessionRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, session)}
}

func (_c *SessionRepositoryMock_Create_Call) Run(run func(ctx context.Context, session *domain.Session)) *SessionRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Session))
	})
	return _c
}

func (_c *SessionRepositoryMock_Create_Call) Return(_a0 error) *SessionRepositoryMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_Create_Call) RunAndReturn(run func(context.Context, *domain.Session) error) *SessionRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *SessionRepositoryMock) FindByID(ctx context.Context, ID uuid.UUID) (*domain.Session, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Session, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Session); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepositoryMock_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type SessionRepositoryMock_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *SessionRepositoryMock_Expecter) FindByID(ctx interface{}, ID interface{}) *SessionRepositoryMock_FindByID_Call {
	return &SessionRepositoryMock_FindByID_Call{Call: _e.mock.On("FindByID", ctx, ID)}
}

func (_c *SessionRepositoryMock_FindByID_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *SessionRepositoryMock_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionRepositoryMock_FindByID_Call) Return(_a0 *domain.Session, _a1 error) *SessionRepositoryMock_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepositoryMock_FindByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.Session, error)) *SessionRepositoryMock_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// Revoke provides a mock function with given fields: ctx, ID
func (_m *SessionRepositoryMock) Revoke(ctx context.Context, ID uuid.UUID) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type SessionRepositoryMock_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *SessionRepositoryMock_Expecter) Revoke(ctx interface{}, ID interface{}) *SessionRepositoryMock_Revoke_Call {
	return &SessionRepositoryMock_Revoke_Call{Call: _e.mock.On("Revoke", ctx, ID)}
}

func (_c *SessionRepositoryMock_Revoke_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *SessionRepositoryMock_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionRepositoryMock_Revoke_Call) Return(_a0 error) *SessionRepositoryMock_Revoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_Revoke_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *SessionRepositoryMock_Revoke_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeByUserID provides a mock function with given fields: ctx, userID
func (_m *SessionRepositoryMock) RevokeByUserID(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_RevokeByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeByUserID'
type SessionRepositoryMock_RevokeByUserID_Call struct {
	*mock.Call
}

// RevokeByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *SessionRepositoryMock_Expecter) RevokeByUserID(ctx interface{}, userID interface{}) *SessionRepositoryMock_RevokeByUserID_Call {
	return &SessionRepositoryMock_RevokeByUserID_Call{Call: _e.mock.On("RevokeByUserID", ctx, userID)}
}

func (_c *SessionRepositoryMock_RevokeByUserID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *SessionRepositoryMock_RevokeByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionRepositoryMock_RevokeByUserID_Call) Return(_a0 error) *SessionRepositoryMock_RevokeByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_RevokeByUserID_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *SessionRepositoryMock_RevokeByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionRepositoryMock creates a new instance of SessionRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepositoryMock {
	mock := &SessionRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
