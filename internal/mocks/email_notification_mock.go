// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// EmailNotificationMock is an autogenerated mock type for the EmailNotification type
type EmailNotificationMock struct {
	mock.Mock
}

type EmailNotificationMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailNotificationMock) EXPECT() *EmailNotificationMock_Expecter {
	return &EmailNotificationMock_Expecter{mock: &_m.Mock}
}

// SendResetPasswordEmail provides a mock function with given fields: ctx, userName, resetLink, userEmail
func (_m *EmailNotificationMock) SendResetPasswordEmail(ctx context.Context, userName string, resetLink string, userEmail string) error {
	ret := _m.Called(ctx, userName, resetLink, userEmail)

	if len(ret) == 0 {
		panic("no return value specified for SendResetPasswordEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userName, resetLink, userEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailNotificationMock_SendResetPasswordEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendResetPasswordEmail'
type EmailNotificationMock_SendResetPasswordEmail_Call struct {
	*mock.Call
}

// SendResetPasswordEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - userName string
//   - resetLink string
//   - userEmail string
func (_e *EmailNotificationMock_Expecter) SendResetPasswordEmail(ctx interface{}, userName interface{}, resetLink interface{}, userEmail interface{}) *EmailNotificationMock_SendResetPasswordEmail_Call {
	return &EmailNotificationMock_SendResetPasswordEmail_Call{Call: _e.mock.On("SendResetPasswordEmail", ctx, userName, resetLink, userEmail)}
}

func (_c *EmailNotificationMock_SendResetPasswordEmail_Call) Run(run func(ctx context.Context, userName string, resetLink string, userEmail string)) *EmailNotificationMock_SendResetPasswordEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *EmailNotificationMock_SendResetPasswordEmail_Call) Return(_a0 error) *EmailNotificationMock_SendResetPasswordEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailNotificationMock_SendResetPasswordEmail_Call) RunAndReturn(run func(context.Context, string, string, string) error) *EmailNotificationMock_SendResetPasswordEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendVerifyEmail provides a mock function with given fields: ctx, userName, verificationLink, userEmail
func (_m *EmailNotificationMock) SendVerifyEmail(ctx context.Context, userName string, verificationLink string, userEmail string) error {
	ret := _m.Called(ctx, userName, verificationLink, userEmail)

	if len(ret) == 0 {
		panic("no return value specified for SendVerifyEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, userName, verificationLink, userEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailNotificationMock_SendVerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerifyEmail'
type EmailNotificationMock_SendVerifyEmail_Call struct {
	*mock.Call
}

// SendVerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - userName string
//   - verificationLink string
//   - userEmail string
func (_e *EmailNotificationMock_Expecter) SendVerifyEmail(ctx interface{}, userName interface{}, verificationLink interface{}, userEmail interface{}) *EmailNotificationMock_SendVerifyEmail_Call {
	return &EmailNotificationMock_SendVerifyEmail_Call{Call: _e.mock.On("SendVerifyEmail", ctx, userName, verificationLink, userEmail)}
}

func (_c *EmailNotificationMock_SendVerifyEmail_Call) Run(run func(ctx context.Context, userName string, verificationLink string, userEmail string)) *EmailNotificationMock_SendVerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *EmailNotificationMock_SendVerifyEmail_Call) Return(_a0 error) *EmailNotificationMock_SendVerifyEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailNotificationMock_SendVerifyEmail_Call) RunAndReturn(run func(context.Context, string, string, string) error) *EmailNotificationMock_SendVerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendWelcomeEmail provides a mock function with given fields: ctx, userRegistration, userName, verificationLink, userEmail
func (_m *EmailNotificationMock) SendWelcomeEmail(ctx context.Context, userRegistration time.Time, userName string, verificationLink string, userEmail string) error {
	ret := _m.Called(ctx, userRegistration, userName, verificationLink, userEmail)

	if len(ret) == 0 {
		panic("no return value specified for SendWelcomeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, string, string, string) error); ok {
		r0 = rf(ctx, userRegistration, userName, verificationLink, userEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailNotificationMock_SendWelcomeEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWelcomeEmail'
type EmailNotificationMock_SendWelcomeEmail_Call struct {
	*mock.Call
}

// SendWelcomeEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - userRegistration time.Time
//   - userName string
//   - verificationLink string
//   - userEmail string
func (_e *EmailNotificationMock_Expecter) SendWelcomeEmail(ctx interface{}, userRegistration interface{}, userName interface{}, verificationLink interface{}, userEmail interface{}) *EmailNotificationMock_SendWelcomeEmail_Call {
	return &EmailNotificationMock_SendWelcomeEmail_Call{Call: _e.mock.On("SendWelcomeEmail", ctx, userRegistration, userName, verificationLink, userEmail)}
}

func (_c *EmailNotificationMock_SendWelcomeEmail_Call) Run(run func(ctx context.Context, userRegistration time.Time, userName string, verificationLink string, userEmail string)) *EmailNotificationMock_SendWelcomeEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *EmailNotificationMock_SendWelcomeEmail_Call) Return(_a0 error) *EmailNotificationMock_SendWelcomeEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailNotificationMock_SendWelcomeEmail_Call) RunAndReturn(run func(context.Context, time.Time, string, string, string) error) *EmailNotificationMock_SendWelcomeEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailNotificationMock creates a new instance of EmailNotificationMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailNotificationMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailNotificationMock {
	mock := &EmailNotificationMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
