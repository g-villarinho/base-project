// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/g-villarinho/user-demo/internal/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewVerificationRepositoryMock creates a new instance of VerificationRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerificationRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *VerificationRepositoryMock {
	mock := &VerificationRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VerificationRepositoryMock is an autogenerated mock type for the VerificationRepository type
type VerificationRepositoryMock struct {
	mock.Mock
}

type VerificationRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *VerificationRepositoryMock) EXPECT() *VerificationRepositoryMock_Expecter {
	return &VerificationRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type VerificationRepositoryMock
func (_mock *VerificationRepositoryMock) Create(ctx context.Context, verification *domain.Verification) error {
	ret := _mock.Called(ctx, verification)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Verification) error); ok {
		r0 = returnFunc(ctx, verification)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VerificationRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type VerificationRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - verification *domain.Verification
func (_e *VerificationRepositoryMock_Expecter) Create(ctx interface{}, verification interface{}) *VerificationRepositoryMock_Create_Call {
	return &VerificationRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, verification)}
}

func (_c *VerificationRepositoryMock_Create_Call) Run(run func(ctx context.Context, verification *domain.Verification)) *VerificationRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Verification
		if args[1] != nil {
			arg1 = args[1].(*domain.Verification)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VerificationRepositoryMock_Create_Call) Return(err error) *VerificationRepositoryMock_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VerificationRepositoryMock_Create_Call) RunAndReturn(run func(ctx context.Context, verification *domain.Verification) error) *VerificationRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type VerificationRepositoryMock
func (_mock *VerificationRepositoryMock) Delete(ctx context.Context, ID uuid.UUID) error {
	ret := _mock.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VerificationRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type VerificationRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *VerificationRepositoryMock_Expecter) Delete(ctx interface{}, ID interface{}) *VerificationRepositoryMock_Delete_Call {
	return &VerificationRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", ctx, ID)}
}

func (_c *VerificationRepositoryMock_Delete_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *VerificationRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VerificationRepositoryMock_Delete_Call) Return(err error) *VerificationRepositoryMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VerificationRepositoryMock_Delete_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID) error) *VerificationRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type VerificationRepositoryMock
func (_mock *VerificationRepositoryMock) FindByID(ctx context.Context, ID uuid.UUID) (*domain.Verification, error) {
	ret := _mock.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Verification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Verification, error)); ok {
		return returnFunc(ctx, ID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Verification); ok {
		r0 = returnFunc(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Verification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VerificationRepositoryMock_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type VerificationRepositoryMock_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *VerificationRepositoryMock_Expecter) FindByID(ctx interface{}, ID interface{}) *VerificationRepositoryMock_FindByID_Call {
	return &VerificationRepositoryMock_FindByID_Call{Call: _e.mock.On("FindByID", ctx, ID)}
}

func (_c *VerificationRepositoryMock_FindByID_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *VerificationRepositoryMock_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VerificationRepositoryMock_FindByID_Call) Return(verification *domain.Verification, err error) *VerificationRepositoryMock_FindByID_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *VerificationRepositoryMock_FindByID_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID) (*domain.Verification, error)) *VerificationRepositoryMock_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByToken provides a mock function for the type VerificationRepositoryMock
func (_mock *VerificationRepositoryMock) FindByToken(ctx context.Context, token string) (*domain.Verification, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for FindByToken")
	}

	var r0 *domain.Verification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Verification, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Verification); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Verification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VerificationRepositoryMock_FindByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByToken'
type VerificationRepositoryMock_FindByToken_Call struct {
	*mock.Call
}

// FindByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *VerificationRepositoryMock_Expecter) FindByToken(ctx interface{}, token interface{}) *VerificationRepositoryMock_FindByToken_Call {
	return &VerificationRepositoryMock_FindByToken_Call{Call: _e.mock.On("FindByToken", ctx, token)}
}

func (_c *VerificationRepositoryMock_FindByToken_Call) Run(run func(ctx context.Context, token string)) *VerificationRepositoryMock_FindByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VerificationRepositoryMock_FindByToken_Call) Return(verification *domain.Verification, err error) *VerificationRepositoryMock_FindByToken_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *VerificationRepositoryMock_FindByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*domain.Verification, error)) *VerificationRepositoryMock_FindByToken_Call {
	_c.Call.Return(run)
	return _c
}

// FindValidByUserIDAndFlow provides a mock function for the type VerificationRepositoryMock
func (_mock *VerificationRepositoryMock) FindValidByUserIDAndFlow(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow) (*domain.Verification, error) {
	ret := _mock.Called(ctx, userID, flow)

	if len(ret) == 0 {
		panic("no return value specified for FindValidByUserIDAndFlow")
	}

	var r0 *domain.Verification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.VerificationFlow) (*domain.Verification, error)); ok {
		return returnFunc(ctx, userID, flow)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.VerificationFlow) *domain.Verification); ok {
		r0 = returnFunc(ctx, userID, flow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Verification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, domain.VerificationFlow) error); ok {
		r1 = returnFunc(ctx, userID, flow)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VerificationRepositoryMock_FindValidByUserIDAndFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindValidByUserIDAndFlow'
type VerificationRepositoryMock_FindValidByUserIDAndFlow_Call struct {
	*mock.Call
}

// FindValidByUserIDAndFlow is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - flow domain.VerificationFlow
func (_e *VerificationRepositoryMock_Expecter) FindValidByUserIDAndFlow(ctx interface{}, userID interface{}, flow interface{}) *VerificationRepositoryMock_FindValidByUserIDAndFlow_Call {
	return &VerificationRepositoryMock_FindValidByUserIDAndFlow_Call{Call: _e.mock.On("FindValidByUserIDAndFlow", ctx, userID, flow)}
}

func (_c *VerificationRepositoryMock_FindValidByUserIDAndFlow_Call) Run(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow)) *VerificationRepositoryMock_FindValidByUserIDAndFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 domain.VerificationFlow
		if args[2] != nil {
			arg2 = args[2].(domain.VerificationFlow)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VerificationRepositoryMock_FindValidByUserIDAndFlow_Call) Return(verification *domain.Verification, err error) *VerificationRepositoryMock_FindValidByUserIDAndFlow_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *VerificationRepositoryMock_FindValidByUserIDAndFlow_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow) (*domain.Verification, error)) *VerificationRepositoryMock_FindValidByUserIDAndFlow_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateByUserIDAndFlow provides a mock function for the type VerificationRepositoryMock
func (_mock *VerificationRepositoryMock) InvalidateByUserIDAndFlow(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow) error {
	ret := _mock.Called(ctx, userID, flow)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateByUserIDAndFlow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.VerificationFlow) error); ok {
		r0 = returnFunc(ctx, userID, flow)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateByUserIDAndFlow'
type VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call struct {
	*mock.Call
}

// InvalidateByUserIDAndFlow is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - flow domain.VerificationFlow
func (_e *VerificationRepositoryMock_Expecter) InvalidateByUserIDAndFlow(ctx interface{}, userID interface{}, flow interface{}) *VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call {
	return &VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call{Call: _e.mock.On("InvalidateByUserIDAndFlow", ctx, userID, flow)}
}

func (_c *VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call) Run(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow)) *VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 domain.VerificationFlow
		if args[2] != nil {
			arg2 = args[2].(domain.VerificationFlow)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call) Return(err error) *VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, flow domain.VerificationFlow) error) *VerificationRepositoryMock_InvalidateByUserIDAndFlow_Call {
	_c.Call.Return(run)
	return _c
}
