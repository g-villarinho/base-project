// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewCookieHandlerMock creates a new instance of CookieHandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCookieHandlerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CookieHandlerMock {
	mock := &CookieHandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CookieHandlerMock is an autogenerated mock type for the CookieHandler type
type CookieHandlerMock struct {
	mock.Mock
}

type CookieHandlerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CookieHandlerMock) EXPECT() *CookieHandlerMock_Expecter {
	return &CookieHandlerMock_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type CookieHandlerMock
func (_mock *CookieHandlerMock) Delete(ectx echo.Context) {
	_mock.Called(ectx)
	return
}

// CookieHandlerMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CookieHandlerMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ectx echo.Context
func (_e *CookieHandlerMock_Expecter) Delete(ectx interface{}) *CookieHandlerMock_Delete_Call {
	return &CookieHandlerMock_Delete_Call{Call: _e.mock.On("Delete", ectx)}
}

func (_c *CookieHandlerMock_Delete_Call) Run(run func(ectx echo.Context)) *CookieHandlerMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 echo.Context
		if args[0] != nil {
			arg0 = args[0].(echo.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *CookieHandlerMock_Delete_Call) Return() *CookieHandlerMock_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *CookieHandlerMock_Delete_Call) RunAndReturn(run func(ectx echo.Context)) *CookieHandlerMock_Delete_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function for the type CookieHandlerMock
func (_mock *CookieHandlerMock) Get(ectx echo.Context) (*http.Cookie, error) {
	ret := _mock.Called(ectx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *http.Cookie
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(echo.Context) (*http.Cookie, error)); ok {
		return returnFunc(ectx)
	}
	if returnFunc, ok := ret.Get(0).(func(echo.Context) *http.Cookie); ok {
		r0 = returnFunc(ectx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = returnFunc(ectx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CookieHandlerMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CookieHandlerMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ectx echo.Context
func (_e *CookieHandlerMock_Expecter) Get(ectx interface{}) *CookieHandlerMock_Get_Call {
	return &CookieHandlerMock_Get_Call{Call: _e.mock.On("Get", ectx)}
}

func (_c *CookieHandlerMock_Get_Call) Run(run func(ectx echo.Context)) *CookieHandlerMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 echo.Context
		if args[0] != nil {
			arg0 = args[0].(echo.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *CookieHandlerMock_Get_Call) Return(cookie *http.Cookie, err error) *CookieHandlerMock_Get_Call {
	_c.Call.Return(cookie, err)
	return _c
}

func (_c *CookieHandlerMock_Get_Call) RunAndReturn(run func(ectx echo.Context) (*http.Cookie, error)) *CookieHandlerMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type CookieHandlerMock
func (_mock *CookieHandlerMock) Set(ectx echo.Context, value string, expiresAt time.Time) {
	_mock.Called(ectx, value, expiresAt)
	return
}

// CookieHandlerMock_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CookieHandlerMock_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ectx echo.Context
//   - value string
//   - expiresAt time.Time
func (_e *CookieHandlerMock_Expecter) Set(ectx interface{}, value interface{}, expiresAt interface{}) *CookieHandlerMock_Set_Call {
	return &CookieHandlerMock_Set_Call{Call: _e.mock.On("Set", ectx, value, expiresAt)}
}

func (_c *CookieHandlerMock_Set_Call) Run(run func(ectx echo.Context, value string, expiresAt time.Time)) *CookieHandlerMock_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 echo.Context
		if args[0] != nil {
			arg0 = args[0].(echo.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CookieHandlerMock_Set_Call) Return() *CookieHandlerMock_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *CookieHandlerMock_Set_Call) RunAndReturn(run func(ectx echo.Context, value string, expiresAt time.Time)) *CookieHandlerMock_Set_Call {
	_c.Run(run)
	return _c
}
