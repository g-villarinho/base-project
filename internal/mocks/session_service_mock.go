// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/g-villarinho/base-project/internal/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewSessionServiceMock creates a new instance of SessionServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionServiceMock {
	mock := &SessionServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SessionServiceMock is an autogenerated mock type for the SessionService type
type SessionServiceMock struct {
	mock.Mock
}

type SessionServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionServiceMock) EXPECT() *SessionServiceMock_Expecter {
	return &SessionServiceMock_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function for the type SessionServiceMock
func (_mock *SessionServiceMock) CreateSession(ctx context.Context, userID uuid.UUID, ipAddress string, deviceName string, userAgent string) (*domain.Session, error) {
	ret := _mock.Called(ctx, userID, ipAddress, deviceName, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *domain.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string) (*domain.Session, error)); ok {
		return returnFunc(ctx, userID, ipAddress, deviceName, userAgent)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string) *domain.Session); ok {
		r0 = returnFunc(ctx, userID, ipAddress, deviceName, userAgent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, string) error); ok {
		r1 = returnFunc(ctx, userID, ipAddress, deviceName, userAgent)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SessionServiceMock_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionServiceMock_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - ipAddress string
//   - deviceName string
//   - userAgent string
func (_e *SessionServiceMock_Expecter) CreateSession(ctx interface{}, userID interface{}, ipAddress interface{}, deviceName interface{}, userAgent interface{}) *SessionServiceMock_CreateSession_Call {
	return &SessionServiceMock_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userID, ipAddress, deviceName, userAgent)}
}

func (_c *SessionServiceMock_CreateSession_Call) Run(run func(ctx context.Context, userID uuid.UUID, ipAddress string, deviceName string, userAgent string)) *SessionServiceMock_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *SessionServiceMock_CreateSession_Call) Return(session *domain.Session, err error) *SessionServiceMock_CreateSession_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *SessionServiceMock_CreateSession_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, ipAddress string, deviceName string, userAgent string) (*domain.Session, error)) *SessionServiceMock_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllSessionsByUserID provides a mock function for the type SessionServiceMock
func (_mock *SessionServiceMock) DeleteAllSessionsByUserID(ctx context.Context, userID uuid.UUID) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllSessionsByUserID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SessionServiceMock_DeleteAllSessionsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllSessionsByUserID'
type SessionServiceMock_DeleteAllSessionsByUserID_Call struct {
	*mock.Call
}

// DeleteAllSessionsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *SessionServiceMock_Expecter) DeleteAllSessionsByUserID(ctx interface{}, userID interface{}) *SessionServiceMock_DeleteAllSessionsByUserID_Call {
	return &SessionServiceMock_DeleteAllSessionsByUserID_Call{Call: _e.mock.On("DeleteAllSessionsByUserID", ctx, userID)}
}

func (_c *SessionServiceMock_DeleteAllSessionsByUserID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *SessionServiceMock_DeleteAllSessionsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SessionServiceMock_DeleteAllSessionsByUserID_Call) Return(err error) *SessionServiceMock_DeleteAllSessionsByUserID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SessionServiceMock_DeleteAllSessionsByUserID_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) error) *SessionServiceMock_DeleteAllSessionsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSessionByID provides a mock function for the type SessionServiceMock
func (_mock *SessionServiceMock) DeleteSessionByID(ctx context.Context, userID uuid.UUID, sessionID uuid.UUID) error {
	ret := _mock.Called(ctx, userID, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSessionByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userID, sessionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SessionServiceMock_DeleteSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSessionByID'
type SessionServiceMock_DeleteSessionByID_Call struct {
	*mock.Call
}

// DeleteSessionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - sessionID uuid.UUID
func (_e *SessionServiceMock_Expecter) DeleteSessionByID(ctx interface{}, userID interface{}, sessionID interface{}) *SessionServiceMock_DeleteSessionByID_Call {
	return &SessionServiceMock_DeleteSessionByID_Call{Call: _e.mock.On("DeleteSessionByID", ctx, userID, sessionID)}
}

func (_c *SessionServiceMock_DeleteSessionByID_Call) Run(run func(ctx context.Context, userID uuid.UUID, sessionID uuid.UUID)) *SessionServiceMock_DeleteSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *SessionServiceMock_DeleteSessionByID_Call) Return(err error) *SessionServiceMock_DeleteSessionByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SessionServiceMock_DeleteSessionByID_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, sessionID uuid.UUID) error) *SessionServiceMock_DeleteSessionByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindSessionByToken provides a mock function for the type SessionServiceMock
func (_mock *SessionServiceMock) FindSessionByToken(ctx context.Context, token string) (*domain.Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for FindSessionByToken")
	}

	var r0 *domain.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SessionServiceMock_FindSessionByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSessionByToken'
type SessionServiceMock_FindSessionByToken_Call struct {
	*mock.Call
}

// FindSessionByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *SessionServiceMock_Expecter) FindSessionByToken(ctx interface{}, token interface{}) *SessionServiceMock_FindSessionByToken_Call {
	return &SessionServiceMock_FindSessionByToken_Call{Call: _e.mock.On("FindSessionByToken", ctx, token)}
}

func (_c *SessionServiceMock_FindSessionByToken_Call) Run(run func(ctx context.Context, token string)) *SessionServiceMock_FindSessionByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SessionServiceMock_FindSessionByToken_Call) Return(session *domain.Session, err error) *SessionServiceMock_FindSessionByToken_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *SessionServiceMock_FindSessionByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*domain.Session, error)) *SessionServiceMock_FindSessionByToken_Call {
	_c.Call.Return(run)
	return _c
}
